When would you want to use a remote repository rather than keeping all your work
local?

    It is a great idea for when you want to share your code, it also serves as a backup of your commit history.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    You might have been working on something that conflicts with a recent change someone else made. In this case you may want to sync up the two versions manually, or fork.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork let's you clone a remote repository in github, in a way that we can track the original repository. Clones are just copies of a repository, we can copy localy, or remotely. Branches are just a way to deviate from the core code to experiment or to compartamentalize your work.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    You can go offline and still be aware of the differences between a branch of yours and the origin/master. You can resolve merges, before pushing back to the remote repository.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    It depends what the alternative is, but Git/Github provides a great way to share changes and documment the discussions through the pull requests. It seems like many people can look at the changes and comment, until they are comfortable enough with the changes to accept the pull request.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    The main benefits I see of using separate branches are that you can isolate your work from work of other people (even from yourself, if you are working on different things at once), you can generate pull requests and document the dicussion around your code with other users before merging your changes.
